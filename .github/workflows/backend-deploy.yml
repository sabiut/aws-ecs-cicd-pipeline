name: Deploy Backend to ECS

on:
  repository_dispatch:
    types: [backend-deploy]
  workflow_dispatch:
    inputs:
      backend_ref:
        description: 'Backend repository ref to deploy'
        required: false
        default: 'main'
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_BACKEND_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_BLUE_SERVICE: ${{ secrets.ECS_BACKEND_BLUE_SERVICE }}
  ECS_GREEN_SERVICE: ${{ secrets.ECS_BACKEND_GREEN_SERVICE }}
  ALB_TARGET_GROUP_BLUE: ${{ secrets.ALB_BACKEND_BLUE_TARGET_GROUP }}
  ALB_TARGET_GROUP_GREEN: ${{ secrets.ALB_BACKEND_GREEN_TARGET_GROUP }}
  ALB_LISTENER_RULE_ARN: ${{ secrets.ALB_BACKEND_LISTENER_RULE_ARN }}
  BACKEND_REPO: 'sabiut/aws-ecs-backend-django'

permissions:
  id-token: write
  contents: read

jobs:
  test:
    name: Test Backend Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CI/CD repository
        uses: actions/checkout@v4

      - name: Checkout backend code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.BACKEND_REPO }}
          ref: ${{ github.event.inputs.backend_ref || github.event.client_payload.ref || 'main' }}
          path: backend-code
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docker/backend/requirements.txt
          pip install pytest black flake8

      - name: Run linting
        run: |
          cd backend-code
          black --check .
          flake8 .

      - name: Run tests
        run: |
          cd backend-code
          python manage.py test

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout CI/CD repository
        uses: actions/checkout@v4

      - name: Checkout backend code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.BACKEND_REPO }}
          ref: ${{ github.event.inputs.backend_ref || github.event.client_payload.ref || 'main' }}
          path: backend-code
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILD_DATE=${{ github.run_id }}
            VCS_REF=${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REPOSITORY }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: Blue/Green Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest
    outputs:
      active-color: ${{ steps.deployment.outputs.active-color }}
      inactive-color: ${{ steps.deployment.outputs.inactive-color }}
    steps:
      - name: Checkout CI/CD repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine active/inactive environments
        id: determine-env
        run: |
          # Check which target group is currently active in the ALB listener rule
          CURRENT_TARGET_GROUP=$(aws elbv2 describe-rules \
            --rule-arns ${{ env.ALB_LISTENER_RULE_ARN }} \
            --query 'Rules[0].Actions[0].TargetGroupArn' \
            --output text)

          echo "Current target group: $CURRENT_TARGET_GROUP"

          if [[ "$CURRENT_TARGET_GROUP" == *"blue"* ]]; then
            echo "ACTIVE_COLOR=blue" >> $GITHUB_ENV
            echo "INACTIVE_COLOR=green" >> $GITHUB_ENV
            echo "ACTIVE_SERVICE=${{ env.ECS_BLUE_SERVICE }}" >> $GITHUB_ENV
            echo "INACTIVE_SERVICE=${{ env.ECS_GREEN_SERVICE }}" >> $GITHUB_ENV
            echo "ACTIVE_TARGET_GROUP=${{ env.ALB_TARGET_GROUP_BLUE }}" >> $GITHUB_ENV
            echo "INACTIVE_TARGET_GROUP=${{ env.ALB_TARGET_GROUP_GREEN }}" >> $GITHUB_ENV
          else
            echo "ACTIVE_COLOR=green" >> $GITHUB_ENV
            echo "INACTIVE_COLOR=blue" >> $GITHUB_ENV
            echo "ACTIVE_SERVICE=${{ env.ECS_GREEN_SERVICE }}" >> $GITHUB_ENV
            echo "INACTIVE_SERVICE=${{ env.ECS_BLUE_SERVICE }}" >> $GITHUB_ENV
            echo "ACTIVE_TARGET_GROUP=${{ env.ALB_TARGET_GROUP_GREEN }}" >> $GITHUB_ENV
            echo "INACTIVE_TARGET_GROUP=${{ env.ALB_TARGET_GROUP_BLUE }}" >> $GITHUB_ENV
          fi

          echo "Active: $ACTIVE_COLOR, Inactive: $INACTIVE_COLOR"

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.INACTIVE_SERVICE }} \
            --query taskDefinition > task-definition.json

      - name: Update task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: backend
          image: ${{ needs.build-and-push.outputs.image-tag }}

      - name: Deploy to inactive environment
        id: deployment
        run: |
          echo "Deploying to inactive environment: ${{ env.INACTIVE_COLOR }}"

          # Update the inactive service with new task definition
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.INACTIVE_SERVICE }} \
            --task-definition ${{ steps.task-def.outputs.task-definition }} \
            --desired-count 1 \
            --force-new-deployment

          # Wait for service to be stable
          echo "Waiting for ${{ env.INACTIVE_SERVICE }} to be stable..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.INACTIVE_SERVICE }}

          echo "active-color=${{ env.ACTIVE_COLOR }}" >> $GITHUB_OUTPUT
          echo "inactive-color=${{ env.INACTIVE_COLOR }}" >> $GITHUB_OUTPUT

      - name: Health check inactive environment
        run: |
          echo "Performing health check on ${{ env.INACTIVE_COLOR }} environment"

          # Wait for targets to be healthy
          echo "Checking target health for ${{ env.INACTIVE_TARGET_GROUP }}"
          aws elbv2 wait target-in-service \
            --target-group-arn ${{ env.INACTIVE_TARGET_GROUP }}

          echo "Health check passed for ${{ env.INACTIVE_COLOR }} environment"

      - name: Switch traffic to new environment
        run: |
          echo "Switching traffic from ${{ env.ACTIVE_COLOR }} to ${{ env.INACTIVE_COLOR }}"

          # Update ALB listener rule to point to the new environment
          aws elbv2 modify-rule \
            --rule-arn ${{ env.ALB_LISTENER_RULE_ARN }} \
            --actions Type=forward,TargetGroupArn=${{ env.INACTIVE_TARGET_GROUP }}

          echo "Traffic switched to ${{ env.INACTIVE_COLOR }} environment"

      - name: Scale down old environment
        run: |
          echo "Scaling down old ${{ env.ACTIVE_COLOR }} environment"

          # Scale down the previously active service
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ACTIVE_SERVICE }} \
            --desired-count 0

          echo "Old environment scaled down"

      - name: Notify deployment success
        if: success()
        run: |
          echo "Backend deployed successfully using blue/green strategy"
          echo "Previous active: ${{ env.ACTIVE_COLOR }}"
          echo "New active: ${{ env.INACTIVE_COLOR }}"
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"

  rollback:
    name: Instant Rollback on Failure
    needs: [build-and-push, deploy]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Instant rollback via traffic switch
        run: |
          echo "Performing instant rollback by switching traffic back"

          # Determine current environment state
          CURRENT_TARGET_GROUP=$(aws elbv2 describe-rules \
            --rule-arns ${{ env.ALB_LISTENER_RULE_ARN }} \
            --query 'Rules[0].Actions[0].TargetGroupArn' \
            --output text)

          # Switch back to the previous environment
          if [[ "$CURRENT_TARGET_GROUP" == *"blue"* ]]; then
            echo "Switching back to green environment"
            ROLLBACK_TARGET_GROUP=${{ env.ALB_TARGET_GROUP_GREEN }}
            ROLLBACK_SERVICE=${{ env.ECS_GREEN_SERVICE }}
            FAILED_SERVICE=${{ env.ECS_BLUE_SERVICE }}
          else
            echo "Switching back to blue environment"
            ROLLBACK_TARGET_GROUP=${{ env.ALB_TARGET_GROUP_BLUE }}
            ROLLBACK_SERVICE=${{ env.ECS_BLUE_SERVICE }}
            FAILED_SERVICE=${{ env.ECS_GREEN_SERVICE }}
          fi

          # Ensure rollback environment is running
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service $ROLLBACK_SERVICE \
            --desired-count 1

          # Wait for rollback service to be stable
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services $ROLLBACK_SERVICE

          # Switch traffic back immediately
          aws elbv2 modify-rule \
            --rule-arn ${{ env.ALB_LISTENER_RULE_ARN }} \
            --actions Type=forward,TargetGroupArn=$ROLLBACK_TARGET_GROUP

          # Scale down failed deployment
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service $FAILED_SERVICE \
            --desired-count 0

          echo "Instant rollback completed successfully"

      - name: Notify rollback
        if: always()
        run: |
          echo "Blue/green deployment rollback completed"
          echo "Traffic switched back to previous stable environment"